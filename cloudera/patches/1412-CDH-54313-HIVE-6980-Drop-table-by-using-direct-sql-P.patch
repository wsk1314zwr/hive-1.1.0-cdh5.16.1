From d7be9dd140a2acf3638f879545ecd1bcbe44498a Mon Sep 17 00:00:00 2001
From: Karthik Manamcheri <karthik@cloudera.com>
Date: Tue, 24 Jul 2018 15:40:12 -0500
Subject: [PATCH 1412/1431] CDH-54313: HIVE-6980: Drop table by using direct
 sql (Peter Vary, reviewed by Alexander Kolbasov,
 Vihang Karajgaonkar)

(cherry picked from commit e84e89d78051d7c4ac474a407c85f8200d8537bb)

==C5_FEATURE_IMPALA_METADATA==

Change-Id: Ib8c0efdb20138edb498b3ef56907cb5b14732313
---
 .../hadoop/hive/metastore/MetaStoreDirectSql.java  |  399 +++++++++++++++++---
 .../apache/hadoop/hive/metastore/ObjectStore.java  |   25 +-
 2 files changed, 377 insertions(+), 47 deletions(-)

diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreDirectSql.java b/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreDirectSql.java
index d515c0d..19df160 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreDirectSql.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreDirectSql.java
@@ -21,6 +21,9 @@
 import static org.apache.commons.lang.StringUtils.join;
 import static org.apache.commons.lang.StringUtils.repeat;
 
+import com.google.common.base.Function;
+import com.google.common.base.Joiner;
+import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import java.sql.Connection;
 import java.sql.Statement;
@@ -28,11 +31,13 @@
 import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.TreeMap;
+import javax.annotation.Nullable;
 import javax.jdo.PersistenceManager;
 import javax.jdo.Query;
 import javax.jdo.Transaction;
@@ -357,22 +362,27 @@ public Database getDatabase(String dbName) throws MetaException{
 
   /**
    * Gets partitions by using direct SQL queries.
-   * Note that batching is not needed for this method - list of names implies the batch size;
    * @param dbName Metastore db name.
    * @param tblName Metastore table name.
    * @param partNames Partition names to get.
    * @return List of partitions.
    */
-  public List<Partition> getPartitionsViaSqlFilter(final String dbName, final String tblName,
-      List<String> partNames) throws MetaException {
+  public List<Partition> getPartitionsViaSqlFilter(final String dbName,
+      final String tblName, List<String> partNames)
+      throws MetaException {
     if (partNames.isEmpty()) {
-      return new ArrayList<Partition>();
+      return Collections.emptyList();
     }
     return runBatched(partNames, new Batchable<String, Partition>() {
+      @Override
       public List<Partition> run(List<String> input) throws MetaException {
         String filter = "\"PARTITIONS\".\"PART_NAME\" in (" + makeParams(input.size()) + ")";
-        return getPartitionsViaSqlFilterInternal(dbName, tblName, null, filter, input,
-            new ArrayList<String>(), null);
+        List<Object> partitionIds = getPartitionIdsViaSqlFilter(dbName, tblName,
+            filter, input, Collections.<String>emptyList(), null);
+        if (partitionIds.isEmpty()) {
+          return Collections.emptyList(); // no partitions, bail early.
+        }
+        return getPartitionsFromPartitionIds(dbName, tblName, null, partitionIds);
       }
     });
   }
@@ -384,10 +394,21 @@ public Database getDatabase(String dbName) throws MetaException{
    * @return List of partitions.
    */
   public List<Partition> getPartitionsViaSqlFilter(
-      SqlFilterForPushdown filter, Integer max) throws MetaException {
-    Boolean isViewTable = isViewTable(filter.table);
-    return getPartitionsViaSqlFilterInternal(filter.table.getDbName(), filter.table.getTableName(),
-        isViewTable, filter.filter, filter.params, filter.joins, max);
+      final SqlFilterForPushdown filter, Integer max) throws MetaException {
+    final Boolean isViewTable = isViewTable(filter.table);
+    List<Object> partitionIds = getPartitionIdsViaSqlFilter(
+        filter.table.getDbName(), filter.table.getTableName(), filter.filter, filter.params,
+        filter.joins, max);
+    if (partitionIds.isEmpty()) {
+      return Collections.emptyList(); // no partitions, bail early.
+    }
+    return runBatched(partitionIds, new Batchable<Object, Partition>() {
+      @Override
+      public List<Partition> run(List<Object> input) throws MetaException {
+        return getPartitionsFromPartitionIds(filter.table.getDbName(),
+            filter.table.getTableName(), isViewTable, input);
+      }
+    });
   }
 
   public static class SqlFilterForPushdown {
@@ -415,9 +436,21 @@ public boolean generateSqlFilterForPushdown(
    * @return List of partitions.
    */
   public List<Partition> getPartitions(
-      String dbName, String tblName, Integer max) throws MetaException {
-    return getPartitionsViaSqlFilterInternal(dbName, tblName, null,
-        null, new ArrayList<String>(), new ArrayList<String>(), max);
+      final String dbName, final String tblName, Integer max) throws MetaException {
+    List<Object> partitionIds = getPartitionIdsViaSqlFilter(dbName,
+        tblName, null, Collections.<String>emptyList(), Collections.<String>emptyList(), max);
+    if (partitionIds.isEmpty()) {
+      return Collections.emptyList(); // no partitions, bail early.
+    }
+
+    // Get full objects. For Oracle/etc. do it in batches.
+    List<Partition> result = runBatched(partitionIds, new Batchable<Object, Partition>() {
+      @Override
+      public List<Partition> run(List<Object> input) throws MetaException {
+        return getPartitionsFromPartitionIds(dbName, tblName, null, input);
+      }
+    });
+    return result;
   }
 
   private static Boolean isViewTable(Table t) {
@@ -444,12 +477,10 @@ private boolean isViewTable(String dbName, String tblName) throws MetaException
   }
 
   /**
-   * Get partition objects for the query using direct SQL queries, to avoid bazillion
+   * Get partition ids for the query using direct SQL queries, to avoid bazillion
    * queries created by DN retrieving stuff for each object individually.
-   * @param dbName Metastore db name.
-   * @param tblName Metastore table name.
-   * @param isView Whether table is a view. Can be passed as null if not immediately
-   *               known, then this method will get it only if necessary.
+   * @param dbName MetaStore db name
+   * @param tblName MetaStore table name
    * @param sqlFilter SQL filter to use. Better be SQL92-compliant.
    * @param paramsForFilter params for ?-s in SQL filter text. Params must be in order.
    * @param joinsForFilter if the filter needs additional join statement, they must be in
@@ -457,24 +488,19 @@ private boolean isViewTable(String dbName, String tblName) throws MetaException
    * @param max The maximum number of partitions to return.
    * @return List of partition objects.
    */
-  private List<Partition> getPartitionsViaSqlFilterInternal(String dbName, String tblName,
-      final Boolean isView, String sqlFilter, List<? extends Object> paramsForFilter,
-      List<String> joinsForFilter, Integer max) throws MetaException {
+  private List<Object> getPartitionIdsViaSqlFilter(
+      String dbName, String tblName, String sqlFilter,
+      List<? extends Object> paramsForFilter, List<String> joinsForFilter, Integer max)
+      throws MetaException {
     boolean doTrace = LOG.isDebugEnabled();
-    final String dbNameLcase = dbName.toLowerCase(), tblNameLcase = tblName.toLowerCase();
+    final String dbNameLcase = dbName.toLowerCase();
+    final String tblNameLcase = tblName.toLowerCase();
+
     // We have to be mindful of order during filtering if we are not returning all partitions.
     String orderForFilter = (max != null) ? " order by \"PART_NAME\" asc" : "";
 
     doDbSpecificInitializationsBeforeQuery();
 
-    // Get all simple fields for partitions and related objects, which we can map one-on-one.
-    // We will do this in 2 queries to use different existing indices for each one.
-    // We do not get table and DB name, assuming they are the same as we are using to filter.
-    // TODO: We might want to tune the indexes instead. With current ones MySQL performs
-    // poorly, esp. with 'order by' w/o index on large tables, even if the number of actual
-    // results is small (query that returns 8 out of 32k partitions can go 4sec. to 0sec. by
-    // just adding a \"PART_ID\" IN (...) filter that doesn't alter the results to it, probably
-    // causing it to not sort the entire table due to not knowing how selective the filter is.
     String queryText =
         "select \"PARTITIONS\".\"PART_ID\" from \"PARTITIONS\""
       + "  inner join \"TBLS\" on \"PARTITIONS\".\"TBL_ID\" = \"TBLS\".\"TBL_ID\" "
@@ -499,16 +525,13 @@ private boolean isViewTable(String dbName, String tblName) throws MetaException
     long queryTime = doTrace ? System.nanoTime() : 0;
     timingTrace(doTrace, queryText, start, queryTime);
     if (sqlResult.isEmpty()) {
-      return new ArrayList<Partition>(); // no partitions, bail early.
+      return Collections.emptyList(); // no partitions, bail early.
     }
 
-    // Get full objects. For Oracle/etc. do it in batches.
-    List<Partition> result = runBatched(sqlResult, new Batchable<Object, Partition>() {
-      public List<Partition> run(List<Object> input) throws MetaException {
-        return getPartitionsFromPartitionIds(dbNameLcase, tblNameLcase, isView, input);
-      }
-    });
-
+    List<Object> result = new ArrayList<Object>(sqlResult.size());
+    for (Object fields : sqlResult) {
+      result.add(extractSqlLong(fields));
+    }
     query.closeAll();
     return result;
   }
@@ -517,14 +540,10 @@ private boolean isViewTable(String dbName, String tblName) throws MetaException
   private List<Partition> getPartitionsFromPartitionIds(String dbName, String tblName,
       Boolean isView, List<Object> partIdList) throws MetaException {
     boolean doTrace = LOG.isDebugEnabled();
+
     int idStringWidth = (int)Math.ceil(Math.log10(partIdList.size())) + 1; // 1 for comma
     int sbCapacity = partIdList.size() * idStringWidth;
-    // Prepare StringBuilder for "PART_ID in (...)" to use in future queries.
-    StringBuilder partSb = new StringBuilder(sbCapacity);
-    for (Object partitionId : partIdList) {
-      partSb.append(extractSqlLong(partitionId)).append(",");
-    }
-    String partIds = trimCommaList(partSb);
+    String partIds = getIdListForIn(partIdList);
 
     // Get most of the fields for the IDs provided.
     // Assume db and table names are the same for all partition, as provided in arguments.
@@ -885,6 +904,24 @@ private String extractSqlString(Object value) {
     return value.toString();
   }
 
+  /**
+   * Helper method for preparing for "SOMETHING_ID in (...)" to use in future queries.
+   * @param objectIds the objectId collection
+   * @return The concatenated list
+   * @throws MetaException If the list contains wrong data
+   */
+  private static String getIdListForIn(List<Object> objectIds) throws MetaException {
+    return Joiner.on(",").skipNulls().join(
+        Iterables.transform(objectIds, new Function<Object, String>() {
+          @Nullable
+          @Override
+          public String apply(@Nullable Object input) {
+            return input == null ? null : input.toString();
+          }
+        })
+    );
+  }
+
   private static String trimCommaList(StringBuilder sb) {
     if (sb.length() > 0) {
       sb.setLength(sb.length() - 1);
@@ -1667,4 +1704,278 @@ public void closeAllQueries() {
     }
     return result;
   }
+
+  /**
+   * Drop partitions by using direct SQL queries.
+   * @param dbName Metastore db name.
+   * @param tblName Metastore table name.
+   * @param partNames Partition names to get.
+   * @return List of partitions.
+   */
+  public void dropPartitionsViaSqlFilter(final String dbName,
+      final String tblName, List<String> partNames)
+      throws MetaException {
+    if (partNames.isEmpty()) {
+      return;
+    }
+
+    runBatched(partNames, new Batchable<String, Void>() {
+      @Override
+      public List<Void> run(List<String> input) throws MetaException {
+        String filter = "\"PARTITIONS\".\"PART_NAME\" in (" + makeParams(input.size()) + ")";
+        // Get partition ids
+        List<Object> partitionIds = getPartitionIdsViaSqlFilter(dbName, tblName,
+            filter, input, Collections.<String>emptyList(), null);
+        if (partitionIds.isEmpty()) {
+          return Collections.emptyList(); // no partitions, bail early.
+        }
+        dropPartitionsByPartitionIds(partitionIds);
+        return Collections.emptyList();
+      }
+    });
+  }
+
+
+  /**
+   * Drops Partition-s. Should be called with the list short enough to not trip up Oracle/etc.
+   * @param partitionIdList The partition identifiers to drop
+   * @throws MetaException If there is an SQL exception during the execution it converted to
+   * MetaException
+   */
+  private void dropPartitionsByPartitionIds(List<Object> partitionIdList) throws MetaException {
+    String queryText;
+
+    String partitionIds = getIdListForIn(partitionIdList);
+
+    // Get the corresponding SD_ID-s, CD_ID-s, SERDE_ID-s
+    queryText =
+        "SELECT \"SDS\".\"SD_ID\", \"SDS\".\"CD_ID\", \"SDS\".\"SERDE_ID\" "
+            + "from \"SDS\" "
+            + "INNER JOIN \"PARTITIONS\" ON \"PARTITIONS\".\"SD_ID\" = \"SDS\".\"SD_ID\" "
+            + "WHERE \"PARTITIONS\".\"PART_ID\" in (" + partitionIds + ")";
+
+    Query query = pm.newQuery("javax.jdo.query.SQL", queryText);
+    List<Object[]> sqlResult = ensureList(executeWithArray(query, null, queryText));
+
+    List<Object> sdIdList = new ArrayList<>(partitionIdList.size());
+    List<Object> columnDescriptorIdList = new ArrayList<>(1);
+    List<Object> serdeIdList = new ArrayList<>(partitionIdList.size());
+
+    if (!sqlResult.isEmpty()) {
+      for (Object[] fields : sqlResult) {
+        sdIdList.add(extractSqlLong(fields[0]));
+        Long colId = extractSqlLong(fields[1]);
+        if (!columnDescriptorIdList.contains(colId)) {
+          columnDescriptorIdList.add(colId);
+        }
+        serdeIdList.add(extractSqlLong(fields[2]));
+      }
+    }
+    query.closeAll();
+
+    try {
+      // Drop privileges
+      queryText = "delete from \"PART_PRIVS\" where \"PART_ID\" in (" + partitionIds + ")";
+      executeNoResult(queryText);
+      Deadline.checkTimeout();
+
+      // Drop column level privileges
+      queryText = "delete from \"PART_COL_PRIVS\" where \"PART_ID\" in (" + partitionIds + ")";
+      executeNoResult(queryText);
+      Deadline.checkTimeout();
+
+      // Drop partition statistics
+      queryText = "delete from \"PART_COL_STATS\" where \"PART_ID\" in (" + partitionIds + ")";
+      executeNoResult(queryText);
+      Deadline.checkTimeout();
+
+      // Drop the partition params
+      queryText = "delete from \"PARTITION_PARAMS\" where \"PART_ID\" in ("
+                      + partitionIds + ")";
+      executeNoResult(queryText);
+      Deadline.checkTimeout();
+
+      // Drop the partition key vals
+      queryText = "delete from \"PARTITION_KEY_VALS\" where \"PART_ID\" in ("
+                      + partitionIds + ")";
+      executeNoResult(queryText);
+      Deadline.checkTimeout();
+
+      // Drop the partitions
+      queryText = "delete from \"PARTITIONS\" where \"PART_ID\" in (" + partitionIds + ")";
+      executeNoResult(queryText);
+      Deadline.checkTimeout();
+    } catch (SQLException sqlException) {
+      LOG.warn("SQL error executing query while dropping partition", sqlException);
+      throw new MetaException("Encountered error while dropping partitions.");
+    }
+    dropStorageDescriptors(sdIdList);
+    Deadline.checkTimeout();
+
+    dropSerdes(serdeIdList);
+    Deadline.checkTimeout();
+
+    dropDanglingColumnDescriptors(columnDescriptorIdList);
+  }
+
+  /**
+   * Drops SD-s. Should be called with the list short enough to not trip up Oracle/etc.
+   * @param storageDescriptorIdList The storage descriptor identifiers to drop
+   * @throws MetaException If there is an SQL exception during the execution it converted to
+   * MetaException
+   */
+  private void dropStorageDescriptors(List<Object> storageDescriptorIdList) throws MetaException {
+    String queryText;
+    String sdIds = getIdListForIn(storageDescriptorIdList);
+
+    // Get the corresponding SKEWED_STRING_LIST_ID data
+    queryText =
+        "select \"SKEWED_VALUES\".\"STRING_LIST_ID_EID\" "
+            + "from \"SKEWED_VALUES\" "
+            + "WHERE \"SKEWED_VALUES\".\"SD_ID_OID\" in  (" + sdIds + ")";
+
+    Query query = pm.newQuery("javax.jdo.query.SQL", queryText);
+    List<Object[]> sqlResult = ensureList(executeWithArray(query, null, queryText));
+
+    List<Object> skewedStringListIdList = new ArrayList<>(0);
+
+    if (!sqlResult.isEmpty()) {
+      for (Object[] fields : sqlResult) {
+        skewedStringListIdList.add(extractSqlLong(fields[0]));
+      }
+    }
+    query.closeAll();
+
+    String skewedStringListIds = getIdListForIn(skewedStringListIdList);
+
+    try {
+      // Drop the SD params
+      queryText = "delete from \"SD_PARAMS\" where \"SD_ID\" in (" + sdIds + ")";
+      executeNoResult(queryText);
+      Deadline.checkTimeout();
+
+      // Drop the sort cols
+      queryText = "delete from \"SORT_COLS\" where \"SD_ID\" in (" + sdIds + ")";
+      executeNoResult(queryText);
+      Deadline.checkTimeout();
+
+      // Drop the bucketing cols
+      queryText = "delete from \"BUCKETING_COLS\" where \"SD_ID\" in (" + sdIds + ")";
+      executeNoResult(queryText);
+      Deadline.checkTimeout();
+
+      // Drop the skewed string lists
+      if (skewedStringListIdList.size() > 0) {
+        // Drop the skewed string value loc map
+        queryText = "delete from \"SKEWED_COL_VALUE_LOC_MAP\" where \"SD_ID\" in ("
+                        + sdIds + ")";
+        executeNoResult(queryText);
+        Deadline.checkTimeout();
+
+        // Drop the skewed values
+        queryText = "delete from \"SKEWED_VALUES\" where \"SD_ID_OID\" in (" + sdIds + ")";
+        executeNoResult(queryText);
+        Deadline.checkTimeout();
+
+        // Drop the skewed string list values
+        queryText = "delete from \"SKEWED_STRING_LIST_VALUES\" where \"STRING_LIST_ID\" in ("
+                        + skewedStringListIds + ")";
+        executeNoResult(queryText);
+        Deadline.checkTimeout();
+
+        // Drop the skewed string list
+        queryText = "delete from \"SKEWED_STRING_LIST\" where \"STRING_LIST_ID\" in ("
+                        + skewedStringListIds + ")";
+        executeNoResult(queryText);
+        Deadline.checkTimeout();
+      }
+
+      // Drop the skewed cols
+      queryText = "delete from \"SKEWED_COL_NAMES\" where \"SD_ID\" in (" + sdIds + ")";
+      executeNoResult(queryText);
+      Deadline.checkTimeout();
+
+      // Drop the sds
+      queryText = "delete from \"SDS\" where \"SD_ID\" in (" + sdIds + ")";
+      executeNoResult(queryText);
+    } catch (SQLException sqlException) {
+      LOG.warn("SQL error executing query while dropping storage descriptor.", sqlException);
+      throw new MetaException("Encountered error while dropping storage descriptor.");
+    }
+  }
+
+  /**
+   * Drops Serde-s. Should be called with the list short enough to not trip up Oracle/etc.
+   * @param serdeIdList The serde identifiers to drop
+   * @throws MetaException If there is an SQL exception during the execution it converted to
+   * MetaException
+   */
+  private void dropSerdes(List<Object> serdeIdList) throws MetaException {
+    String queryText;
+    String serdeIds = getIdListForIn(serdeIdList);
+
+    try {
+      // Drop the serde params
+      queryText = "delete from \"SERDE_PARAMS\" where \"SERDE_ID\" in (" + serdeIds + ")";
+      executeNoResult(queryText);
+      Deadline.checkTimeout();
+
+      // Drop the serdes
+      queryText = "delete from \"SERDES\" where \"SERDE_ID\" in (" + serdeIds + ")";
+      executeNoResult(queryText);
+    } catch (SQLException sqlException) {
+      LOG.warn("SQL error executing query while dropping serde.", sqlException);
+      throw new MetaException("Encountered error while dropping serde.");
+    }
+  }
+
+  /**
+   * Checks if the column descriptors still has references for other SD-s. If not, then removes
+   * them. Should be called with the list short enough to not trip up Oracle/etc.
+   * @param columnDescriptorIdList The column identifiers
+   * @throws MetaException If there is an SQL exception during the execution it converted to
+   * MetaException
+   */
+  private void dropDanglingColumnDescriptors(List<Object> columnDescriptorIdList)
+      throws MetaException {
+    String queryText;
+    String colIds = getIdListForIn(columnDescriptorIdList);
+
+    // Drop column descriptor, if no relation left
+    queryText =
+        "SELECT \"SDS\".\"CD_ID\", count(1) "
+            + "from \"SDS\" "
+            + "WHERE \"SDS\".\"CD_ID\" in (" + colIds + ") "
+            + "GROUP BY \"SDS\".\"CD_ID\"";
+    Query query = pm.newQuery("javax.jdo.query.SQL", queryText);
+    List<Object[]> sqlResult = ensureList(executeWithArray(query, null, queryText));
+
+    List<Object> danglingColumnDescriptorIdList = new ArrayList<>(columnDescriptorIdList.size());
+    if (!sqlResult.isEmpty()) {
+      for (Object[] fields : sqlResult) {
+        if (extractSqlInt(fields[1]) == 0) {
+          danglingColumnDescriptorIdList.add(extractSqlLong(fields[0]));
+        }
+      }
+    }
+    query.closeAll();
+
+    if (!danglingColumnDescriptorIdList.isEmpty()) {
+      try {
+        String danglingCDIds = getIdListForIn(danglingColumnDescriptorIdList);
+
+        // Drop the columns_v2
+        queryText = "delete from \"COLUMNS_V2\" where \"CD_ID\" in (" + danglingCDIds + ")";
+        executeNoResult(queryText);
+        Deadline.checkTimeout();
+
+        // Drop the cols
+        queryText = "delete from \"CDS\" where \"CD_ID\" in (" + danglingCDIds + ")";
+        executeNoResult(queryText);
+      } catch (SQLException sqlException) {
+        LOG.warn("SQL error executing query while dropping dangling col descriptions", sqlException);
+        throw new MetaException("Encountered error while dropping col descriptions");
+      }
+    }
+  }
 }
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java b/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
index ad5a766..5fbeab8 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
@@ -62,6 +62,7 @@
 
 import org.antlr.runtime.CommonTokenStream;
 import org.antlr.runtime.RecognitionException;
+import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configurable;
@@ -1861,9 +1862,27 @@ public boolean dropPartition(String dbName, String tableName,
   }
 
   @Override
-  public void dropPartitions(String dbName, String tblName, List<String> partNames)
+  public void dropPartitions(String dbName, String tblName, final List<String> partNames)
       throws MetaException, NoSuchObjectException {
-    if (partNames.isEmpty()) return;
+    if (CollectionUtils.isEmpty(partNames)) {
+      return;
+    }
+    new GetListHelper<Void>(dbName, tblName, true, true) {
+      @Override
+      protected List<Void> getSqlResult(GetHelper<List<Void>> ctx) throws MetaException {
+        directSql.dropPartitionsViaSqlFilter(dbName, tblName, partNames);
+        return Collections.emptyList();
+      }
+      @Override
+      protected List<Void> getJdoResult(GetHelper<List<Void>> ctx) throws MetaException {
+        dropPartitionsViaJdo(dbName, tblName, partNames);
+        return Collections.emptyList();
+      }
+    }.run(false);
+  }
+
+  private void dropPartitionsViaJdo(String dbName, String tblName,
+      List<String> partNames) throws MetaException {
     boolean success = false;
     openTransaction();
     try {
@@ -1872,7 +1891,7 @@ public void dropPartitions(String dbName, String tblName, List<String> partNames
       dropPartitionAllColumnGrantsNoTxn(dbName, tblName, partNames);
       dropPartitionColumnStatisticsNoTxn(dbName, tblName, partNames);
 
-      // CDs are reused; go thry partition SDs, detach all CDs from SDs, then remove unused CDs.
+      // CDs are reused; go try partition SDs, detach all CDs from SDs, then remove unused CDs.
       for (MColumnDescriptor mcd : detachCdsFromSdsNoTxn(dbName, tblName, partNames)) {
         removeUnusedColumnDescriptor(mcd);
       }
-- 
1.7.9.5

