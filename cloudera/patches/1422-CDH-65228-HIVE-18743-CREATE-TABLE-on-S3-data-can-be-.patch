From 038b8eef7ed5ade59de37769713b5dd4b853eeb3 Mon Sep 17 00:00:00 2001
From: Alexander Kolbasov <akolb@cloudera.com>
Date: Thu, 6 Sep 2018 18:41:43 -0700
Subject: [PATCH 1422/1431] CDH-65228: HIVE-18743: CREATE TABLE on S3 data can
 be extremely slow.DO_NOT_UPDATE_STATS workaround
 is buggy (Alexander Kolbasov, reviwed by Zoltan
 Haindrich via Vihang Karajgaonkar)

==C5_APPROVED_BUGFIX==

Change-Id: I544ee46c217ff682cb865486b0d9f5b0ec43f4b4
---
 .../hadoop/hive/metastore/HiveAlterHandler.java    |    2 +-
 .../hadoop/hive/metastore/HiveMetaStore.java       |    6 +-
 .../hadoop/hive/metastore/MetaStoreUtils.java      |  104 +++++-----
 .../hadoop/hive/metastore/TestMetaStoreUtils.java  |  203 ++++++++++++++++++++
 .../ql/metadata/SessionHiveMetaStoreClient.java    |    2 -
 5 files changed, 259 insertions(+), 58 deletions(-)

diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveAlterHandler.java b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveAlterHandler.java
index 09af8ed..f93e963 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveAlterHandler.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveAlterHandler.java
@@ -256,7 +256,7 @@ public void alterTable(RawStore msdb, Warehouse wh, String dbname,
           Database db = msdb.getDatabase(newt.getDbName());
           // Update table stats. For partitioned table, we update stats in
           // alterPartition()
-          MetaStoreUtils.updateUnpartitionedTableStatsFast(db, newt, wh, false, true);
+          MetaStoreUtils.updateTableStatsSlow(db, newt, wh, false, true);
       }
 
       alterTableUpdateTableColumnStats(msdb, oldt, newt);
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
index 735633b..ead6597 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
@@ -1536,11 +1536,7 @@ private void create_table_core(final RawStore ms, final Table tbl,
         }
         if (HiveConf.getBoolVar(hiveConf, HiveConf.ConfVars.HIVESTATSAUTOGATHER) &&
             !MetaStoreUtils.isView(tbl)) {
-          if (tbl.getPartitionKeysSize() == 0)  { // Unpartitioned table
-            MetaStoreUtils.updateUnpartitionedTableStatsFast(db, tbl, wh, madeDir);
-          } else { // Partitioned table with no partitions.
-            MetaStoreUtils.updateUnpartitionedTableStatsFast(db, tbl, wh, true);
-          }
+          MetaStoreUtils.updateTableStatsSlow(db, tbl, wh, madeDir, false);
         }
 
         // set create time
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java b/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java
index 3a77f0d..35d48cd 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/MetaStoreUtils.java
@@ -176,69 +176,73 @@ public static boolean containsAllFastStats(Map<String, String> partParams) {
     return true;
   }
 
-  public static boolean updateUnpartitionedTableStatsFast(Database db, Table tbl, Warehouse wh,
-      boolean madeDir) throws MetaException {
-    return updateUnpartitionedTableStatsFast(db, tbl, wh, madeDir, false);
-  }
-
-  public static boolean updateUnpartitionedTableStatsFast(Database db, Table tbl, Warehouse wh,
-      boolean madeDir, boolean forceRecompute) throws MetaException {
-    return updateUnpartitionedTableStatsFast(tbl,
-        wh.getFileStatusesForUnpartitionedTable(db, tbl), madeDir, forceRecompute);
-  }
-
   /**
+   *
    * Updates the numFiles and totalSize parameters for the passed unpartitioned Table by querying
    * the warehouse if the passed Table does not already have values for these parameters.
-   * @param tbl
-   * @param fileStatus
+   *
+   * NOTE: This function is rather expensive since it needs to traverse the file system to get all
+   * the information.
+   *
+   * @param db Database
+   * @param tbl Table
+   * @param wh Warehouse instance
    * @param newDir if true, the directory was just created and can be assumed to be empty
    * @param forceRecompute Recompute stats even if the passed Table already has
    * these parameters set
-   * @return true if the stats were updated, false otherwise
    */
-  public static boolean updateUnpartitionedTableStatsFast(Table tbl,
-      FileStatus[] fileStatus, boolean newDir, boolean forceRecompute) throws MetaException {
-
+  public static void updateTableStatsSlow(Database db,
+                                                       Table tbl,
+                                                       Warehouse wh,
+                                                       boolean newDir,
+                                                       boolean forceRecompute) throws MetaException {
+    // DO_NOT_UPDATE_STATS is supposed to be a transient parameter that is only passed via RP
+    // We want to avoid this property from being persistent.
+    //
+    // NOTE: If this property *is* set as table property we will remove it which is incorrect but
+    // we can't distinguish between these two cases
+    //
+    // This problem was introduced by HIVE-10228. A better approach would be to pass the property
+    // via the environment context.
     Map<String,String> params = tbl.getParameters();
-
-    if ((params!=null) && params.containsKey(StatsSetupConst.DO_NOT_UPDATE_STATS)){
-      boolean doNotUpdateStats = Boolean.valueOf(params.get(StatsSetupConst.DO_NOT_UPDATE_STATS));
+    boolean updateStats = true;
+    if ((params != null) && params.containsKey(StatsSetupConst.DO_NOT_UPDATE_STATS)) {
+      updateStats = !Boolean.valueOf(params.get(StatsSetupConst.DO_NOT_UPDATE_STATS));
       params.remove(StatsSetupConst.DO_NOT_UPDATE_STATS);
-      tbl.setParameters(params); // to make sure we remove this marker property
-      if (doNotUpdateStats){
-        return false;
-      }
     }
 
-    boolean updated = false;
-    if (forceRecompute ||
-        params == null ||
-        !containsAllFastStats(params)) {
-      if (params == null) {
-        params = new HashMap<String,String>();
-      }
-      if (!newDir) {
-        // The table location already exists and may contain data.
-        // Let's try to populate those stats that don't require full scan.
-        LOG.info("Updating table stats fast for " + tbl.getTableName());
-        populateQuickStats(fileStatus, params);
-        LOG.info("Updated size of table " + tbl.getTableName() +" to "+ params.get(StatsSetupConst.TOTAL_SIZE));
-        if(!params.containsKey(StatsSetupConst.STATS_GENERATED_VIA_STATS_TASK)) {
-          // invalidate stats requiring scan since this is a regular ddl alter case
-          for (String stat : StatsSetupConst.statsRequireCompute) {
-            params.put(stat, "-1");
-          }
-          params.put(StatsSetupConst.COLUMN_STATS_ACCURATE, StatsSetupConst.FALSE);
-        } else {
-          params.remove(StatsSetupConst.STATS_GENERATED_VIA_STATS_TASK);
-          params.put(StatsSetupConst.COLUMN_STATS_ACCURATE, StatsSetupConst.TRUE);
-        }
-      }
+    if (!updateStats || newDir || tbl.getPartitionKeysSize() != 0) {
+      return;
+    }
+
+    // If stats are already present and forceRecompute isn't set, nothing to do
+    if (!forceRecompute && params != null && containsAllFastStats(params)) {
+      return;
+    }
+
+    if (params == null) {
+      params = new HashMap<>();
       tbl.setParameters(params);
-      updated = true;
     }
-    return updated;
+
+    // NOTE: wh.getFileStatusesForUnpartitionedTable() can be REALLY slow
+    FileStatus[] fileStatus =  wh.getFileStatusesForUnpartitionedTable(db, tbl);
+
+    // The table location already exists and may contain data.
+    // Let's try to populate those stats that don't require full scan.
+    LOG.info("Updating table stats fast for " + tbl.getTableName());
+    populateQuickStats(fileStatus, params);
+    LOG.info("Updated size of table " + tbl.getTableName() +" to "+ params.get(StatsSetupConst.TOTAL_SIZE));
+    if(!params.containsKey(StatsSetupConst.STATS_GENERATED_VIA_STATS_TASK)) {
+      // invalidate stats requiring scan since this is a regular ddl alter case
+      for (String stat : StatsSetupConst.statsRequireCompute) {
+        params.put(stat, "-1");
+      }
+      params.put(StatsSetupConst.COLUMN_STATS_ACCURATE, StatsSetupConst.FALSE);
+    } else {
+      params.remove(StatsSetupConst.STATS_GENERATED_VIA_STATS_TASK);
+      params.put(StatsSetupConst.COLUMN_STATS_ACCURATE, StatsSetupConst.TRUE);
+    }
   }
 
   public static void populateQuickStats(FileStatus[] fileStatus, Map<String, String> params) {
diff --git a/metastore/src/test/org/apache/hadoop/hive/metastore/TestMetaStoreUtils.java b/metastore/src/test/org/apache/hadoop/hive/metastore/TestMetaStoreUtils.java
index 21f9054..5695036 100644
--- a/metastore/src/test/org/apache/hadoop/hive/metastore/TestMetaStoreUtils.java
+++ b/metastore/src/test/org/apache/hadoop/hive/metastore/TestMetaStoreUtils.java
@@ -18,13 +18,53 @@
 
 package org.apache.hadoop.hive.metastore;
 
+import com.google.common.collect.ImmutableMap;
+import org.apache.hadoop.fs.FileStatus;
+import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.hive.common.StatsSetupConst;
+import org.apache.hadoop.hive.metastore.api.Database;
 import org.apache.hadoop.hive.metastore.api.FieldSchema;
+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;
+import org.apache.hadoop.hive.metastore.api.Table;
+import org.apache.thrift.TException;
 import org.junit.Assert;
 import org.junit.Test;
 
 import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import static org.apache.hadoop.hive.common.StatsSetupConst.COLUMN_STATS_ACCURATE;
+import static org.apache.hadoop.hive.common.StatsSetupConst.NUM_FILES;
+import static org.apache.hadoop.hive.common.StatsSetupConst.TOTAL_SIZE;
+import static org.apache.hadoop.hive.metastore.MetaStoreUtils.updateTableStatsSlow;
+import static org.hamcrest.core.Is.is;
+import static org.junit.Assert.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 public class TestMetaStoreUtils {
+  private static final String DB_NAME = "db1";
+  private static final String TABLE_NAME = "tbl1";
+  private static final String SERDE_LIB = "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe";
+
+
+  private final Map<String, String> paramsWithStats = ImmutableMap.of(
+      NUM_FILES, "1",
+      TOTAL_SIZE, "2"
+  );
+
+  private Database db;
+
+  public TestMetaStoreUtils() {
+    db = new Database(DB_NAME, "", "/", null);
+  }
+
+
 
   @Test
   public void testColumnsIncluded() {
@@ -38,4 +78,167 @@ public void testColumnsIncluded() {
     Assert.assertTrue(MetaStoreUtils.columnsIncluded(Arrays.asList(col1, col2), Arrays.asList(col3, col2, col1)));
     Assert.assertFalse(MetaStoreUtils.columnsIncluded(Arrays.asList(col1, col2), Arrays.asList(col1)));
   }
+
+  /**
+   * Verify that updateTableStatsSlow really updates table statistics.
+   * The test does the following:
+   * <ol>
+   *   <li>Create database</li>
+   *   <li>Create unpartitioned table</li>
+   *   <li>Create unpartitioned table which has params</li>
+   *   <li>Call updateTableStatsSlow with arguments which should cause stats calculation</li>
+   *   <li>Verify table statistics using mocked warehouse</li>
+   *   <li>Create table which already have stats</li>
+   *   <li>Call updateTableStatsSlow forcing stats recompute</li>
+   *   <li>Verify table statistics using mocked warehouse</li>
+   * </ol>
+   */
+  @Test
+  public void testUpdateTableStatsSlow_statsUpdated() throws TException {
+    long fileLength = 5;
+
+    // Create database and table
+    Table tbl = new Table();
+    tbl.setDbName(DB_NAME);
+    tbl.setTableName(TABLE_NAME);
+    StorageDescriptor sd = new StorageDescriptor();
+    sd.setCols(Collections.singletonList(new FieldSchema("id", "int", "")));
+    sd.setLocation("/tmp");
+    tbl.setSd(sd);
+    tbl.setParameters(new HashMap<String, String>());
+
+    // Set up mock warehouse
+    FileStatus fs1 = getFileStatus(1, true, 2, 3, 4, "/tmp/0");
+    FileStatus fs2 = getFileStatus(fileLength, false, 3, 4, 5, "/tmp/1");
+    FileStatus fs3 = getFileStatus(fileLength, false, 3, 4, 5, "/tmp/1");
+    FileStatus[] fileStatus = {fs1, fs2, fs3};
+    Warehouse wh = mock(Warehouse.class);
+    when(wh.getFileStatusesForUnpartitionedTable(db, tbl)).thenReturn(fileStatus);
+
+    Map<String, String> expected = ImmutableMap.of(NUM_FILES, "2",
+        TOTAL_SIZE, String.valueOf(2 * fileLength),
+        "numRows", "-1",
+        "rawDataSize", "-1",
+        COLUMN_STATS_ACCURATE, "false"
+    );
+    updateTableStatsSlow(db, tbl, wh, false, false);
+    assertThat(tbl.getParameters(), is(expected));
+
+    // Verify that when stats are already present and forceRecompute is specified they are recomputed
+    Table tbl1 = new Table();
+    tbl1.setDbName(DB_NAME);
+    tbl1.setTableName(TABLE_NAME);
+    tbl1.setSd(sd);
+    tbl1.setParameters(new HashMap<String, String>());
+    tbl1.getParameters().put(NUM_FILES, "0");
+    tbl1.getParameters().put(TOTAL_SIZE, "0");
+
+    when(wh.getFileStatusesForUnpartitionedTable(db, tbl1)).thenReturn(fileStatus);
+    updateTableStatsSlow(db, tbl1, wh, false, true);
+    assertThat(tbl1.getParameters(), is(expected));
+
+    // Verify that COLUMN_STATS_ACCURATE is removed from params
+    Table tbl2 = new Table();
+    tbl2.setDbName(DB_NAME);
+    tbl2.setTableName(TABLE_NAME);
+    tbl2.setSd(sd);
+    tbl2.setParameters(new HashMap<String, String>());
+    tbl2.getParameters().put(COLUMN_STATS_ACCURATE, "true");
+
+    when(wh.getFileStatusesForUnpartitionedTable(db, tbl2)).thenReturn(fileStatus);
+    updateTableStatsSlow(db, tbl2, wh, false, true);
+    assertThat(tbl2.getParameters(), is(expected));
+  }
+
+  /**
+   * Verify that the call to updateTableStatsSlow() removes DO_NOT_UPDATE_STATS from table params.
+   */
+  @Test
+  public void testUpdateTableStatsSlow_removesDoNotUpdateStats() throws TException {
+    // Create database and table
+    Table tbl = new Table();
+    tbl.setDbName(DB_NAME);
+    tbl.setTableName(TABLE_NAME);
+    StorageDescriptor sd = new StorageDescriptor();
+    sd.setCols(Collections.singletonList(new FieldSchema("id", "int", "")));
+    sd.setLocation("/tmp");
+    tbl.setSd(sd);
+    tbl.setParameters(new HashMap<String, String>());
+    tbl.getParameters().put(StatsSetupConst.DO_NOT_UPDATE_STATS, "true");
+
+    Table tbl1 = new Table();
+    tbl1.setDbName(DB_NAME);
+    tbl1.setTableName(TABLE_NAME);
+    tbl1.setSd(sd);
+    tbl1.setParameters(new HashMap<String, String>());
+    tbl1.getParameters().put(StatsSetupConst.DO_NOT_UPDATE_STATS, "false");
+
+    Warehouse wh = mock(Warehouse.class);
+    updateTableStatsSlow(db, tbl, wh, false, true);
+    Map<String, String> expected = Collections.emptyMap();
+    assertThat(tbl.getParameters(), is(expected));
+    verify(wh, never()).getFileStatusesForUnpartitionedTable(db, tbl);
+    updateTableStatsSlow(db, tbl1, wh, true, false);
+    assertThat(tbl.getParameters(), is(expected));
+    verify(wh, never()).getFileStatusesForUnpartitionedTable(db, tbl1);
+  }
+
+  /**
+   * Verify that updateTableStatsSlow() does not calculate table statistics when
+   * <ol>
+   *   <li>newDir is true</li>
+   *   <li>Table is partitioned</li>
+   *   <li>Stats are already present and forceRecompute isn't set</li>
+   * </ol>
+   */
+  @Test
+  public void testUpdateTableStatsSlow_doesNotUpdateStats() throws TException {
+    FieldSchema fs = new FieldSchema("date", "string", "date column");
+    List<FieldSchema> cols = Collections.singletonList(fs);
+
+    // Create database and table
+    Table tbl = new Table();
+    tbl.setDbName(DB_NAME);
+    tbl.setTableName(TABLE_NAME);
+    StorageDescriptor sd = new StorageDescriptor();
+    sd.setCols(Collections.singletonList(new FieldSchema("id", "int", "")));
+    sd.setLocation("/tmp");
+    tbl.setSd(sd);
+    tbl.setParameters(new HashMap<String, String>());
+
+    Warehouse wh = mock(Warehouse.class);
+    // newDir(true) => stats not updated
+    updateTableStatsSlow(db, tbl, wh, true, false);
+    verify(wh, never()).getFileStatusesForUnpartitionedTable(db, tbl);
+
+    // partitioned table => stats not updated
+    Table tbl1 = new Table();
+    tbl1.setDbName(DB_NAME);
+    tbl1.setTableName(TABLE_NAME);
+    tbl1.setPartitionKeys(cols);
+    tbl1.setSd(sd);
+    tbl.setParameters(new HashMap<String, String>());
+
+    updateTableStatsSlow(db, tbl1, wh, false, false);
+    verify(wh, never()).getFileStatusesForUnpartitionedTable(db, tbl1);
+
+    // Already contains stats => stats not updated when forceRecompute isn't set
+    Table tbl2 = new Table();
+    tbl2.setDbName(DB_NAME);
+    tbl2.setTableName(TABLE_NAME);
+    tbl2.setSd(sd);
+    tbl2.setParameters(paramsWithStats);
+
+    updateTableStatsSlow(db, tbl2, wh, false, false);
+    verify(wh, never()).getFileStatusesForUnpartitionedTable(db, tbl2);
+  }
+
+  /**
+   * Build a FileStatus object.
+   */
+  private static FileStatus getFileStatus(long fileLength, boolean isdir, int blockReplication,
+                                          int blockSize, int modificationTime, String pathString) {
+    return new FileStatus(fileLength, isdir, blockReplication, blockSize, modificationTime, new Path(pathString));
+  }
+
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/metadata/SessionHiveMetaStoreClient.java b/ql/src/java/org/apache/hadoop/hive/ql/metadata/SessionHiveMetaStoreClient.java
index e2b9452..0f318e4 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/metadata/SessionHiveMetaStoreClient.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/metadata/SessionHiveMetaStoreClient.java
@@ -431,8 +431,6 @@ private void alterTempTable(String dbname, String tbl_name,
     }
 
     org.apache.hadoop.hive.metastore.api.Table newtCopy = deepCopyAndLowerCaseTable(newt);
-    MetaStoreUtils.updateUnpartitionedTableStatsFast(newtCopy,
-        getWh().getFileStatusesForSD(newtCopy.getSd()), false, true);
     Table newTable = new Table(newtCopy);
     String newDbName = newTable.getDbName();
     String newTableName = newTable.getTableName();
-- 
1.7.9.5

